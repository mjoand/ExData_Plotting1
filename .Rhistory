cacheSolve(mami)
cachesolve(nani)
cacheSolve(nani)
q()
## makeCacheMatrix creates a special "matrix" object that can cache its inverse.
## The special "matrix" object returned by makeCacheMatrix is a list composed of 4
## functions:
## set:
## get: returns the matrix x, passed as an argument to the MakeCacheMatrix function
## setinverse:
## getinverse: returns either NULL, when MakeCacheMatrix is called for the first time,
#           or the inverse matrix if MakeCachematrix is called subsequently with
#           the same matrix x as argument
makeCacheMatrixb <- function(x = matrix()){
inv <- NULL
get <- function() {x}
setinverse <- function(inverse) {inv <<-inverse}
getinverse <- function() {inv}
list(get = get,setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
# cachesolve retrieves the inverse from the cache.
cacheSolveb <- function(x, ...) {
## retrieving inv (NULL if it is the first time the
# sequence cachesolve(MakeCacheMatrix) has been called,
# the cached inverse matrix if cachesolve(MakeCacheMatrix)
#has been previously called with the same matrix as argument
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
m<-c(1,2,3,4)
mam<-matrix(m,2,2)
## makeCacheMatrix creates a special "matrix" object that can cache its inverse.
## The special "matrix" object returned by makeCacheMatrix is a list composed of 4
## functions:set, get, setinverse and getinverse
##
## get: caches the matrix x, passed as an argument to the MakeCacheMatrix function
## getinverse: returns NULL, when MakeCacheMatrix is called for the first time
# or if MakeCacheMatrix is called withou a subsequent call of the function cacheSolve,
# or caches the inverse of x when MakeCacheMatrix is called following a
#call from cacheSolve
makeCacheMatrix <- function(x = matrix()){
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<-inverse}
getinverse <- function() {inv}
list(set = set, get = get,setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
# cachesolve retrieves the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
#verifying if the inverse matrix has been cached and returning it if that is the case
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
##If the inverse matrix has not been cached the original matrix x is retrieved from
# the cache function get, its inverse is computed and passed as an argument to
# the function set inverse to be cached
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
## makeCacheMatrix creates a special "matrix" object that can cache its inverse.
## The special "matrix" object returned by makeCacheMatrix is a list composed of 4
## functions:set, get, setinverse and getinverse
##
## get: caches the matrix x, passed as an argument to the MakeCacheMatrix function
## getinverse: returns NULL, when MakeCacheMatrix is called for the first time
# or if MakeCacheMatrix is called withou a subsequent call of the function cacheSolve,
# or caches the inverse of x when MakeCacheMatrix is called following a
#call from cacheSolve
makeCacheMatrix <- function(x = matrix()){
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<-inverse}
getinverse <- function() {inv}
list(set = set, get = get,setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
# cachesolve retrieves the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
#verifying if the inverse matrix has been cached and returning it if that is the case
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
##If the inverse matrix has not been cached the original matrix x is retrieved from
# the cache function get, its inverse is computed and passed as an argument to
# the function set inverse to be cached
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
## makeCacheMatrix creates a special "matrix" object that can cache its inverse.
## The special "matrix" object returned by makeCacheMatrix is a list composed of 4
## functions:set, get, setinverse and getinverse
##
## get: caches the matrix x, passed as an argument to the MakeCacheMatrix function
## getinverse: returns NULL, when MakeCacheMatrix is called for the first time
# or if MakeCacheMatrix is called withou a subsequent call of the function cacheSolve,
# or caches the inverse of x when MakeCacheMatrix is called following a
#call from cacheSolve
makeCacheMatrix <- function(x = matrix()){
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() {x}
setinverse <- function(inverse) {inv <<-inverse}
getinverse <- function() {inv}
list(set = set, get = get,setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
# cachesolve retrieves the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
#verifying if the inverse matrix has been cached and returning it if that is the case
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
##If the inverse matrix has not been cached the original matrix x is retrieved from
# the cache function get, its inverse is computed and passed as an argument to
# the function set inverse so that it can be cached by getinverse in makeCacheMatrix
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
m<-c(1,2,3,4)
mam<-matrix(m,2,2)
mami<-makeCacheMatrix(mam)
mami$set()
mami$get()
mami$getinverse()
mami$setinverse()
cacheSolve(mami)
mami$get()
mami$set()
mami$set
mami$getinverse()
mami$setinverse
mami$setineverse()
mami$setinverse()
mami$setinverse(x)
mami$setinverse(mam)
z<-mami$setinverse(mam)
z
cacheSolve(mami)
q()
? seed
?seed
? set.seed
q()
? is.element
x<-2
y<-c(2,3,4,2)
is.element(x,y)
y<-c(1,2,2,2,2)
is.element(x,y)
q()
?setInternet2
?setInternet2
setInternet2(TRUE)
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
?dowloadfile
?downloadfile
?download.file
library(RCurl)
x <- getURL("https://raw.github.com/aronlindberg/latent_growth_classes/master/LGC_data.csv")
y <- read.csv(text = x)
x<-getURL(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
x<-getURL(https:/d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
x<-getURL(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
getwd()
x<-getURL(http:/d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
?fread
install.package(data.table)
install.packages("data.table")
library(data.table)
?fread
library(xlsl)
library(xlsx)
q()
q()
install.packages(sqldf)
?install.packages
library(sqldf)
q()
library(sqldf)
q()
?RTools
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ"
con=url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ")
htmlCode=readLines(con)
close(con)
htmlCode
library(httr)
?sign_oauth1.0
myapp=oauth_app("github",key="5b7bc3329c3b17f0033f",secret="20fdfa746b3259e62410f5b7c2631ff479987ba9")
sig=sign_oauth1.0(myapp,token="5aa94183ea41258d6062a5058f0fb14c50d669c8")
puta=GET("https://api.github.com/users/jtleek/repos",sig)
install.packages("jsonlite")
library(jsonlite)
json1=content(puta)
json2=jsonlite::fromJSON(toJSON(json1))
json2
json1
q()
library(http)
library(httr)
? oauth2.0_token
oauth_endpoints("github")
myapp <- oauth_app("github", "dc20ab113f2eb30d2b66")
myapp <- oauth_app("github", "dc20ab113f2eb30d2b66","564c7e23e3f76deefbbe2aae9b3fc0581192750")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
sort(names(jsonData))
class(jsonData)
class(jsonData)
JsonData$owner
jsondata$owner
jsonData$owner
jsonData$id
names(jsonData)
jsonData$created_at
jsonData$full_name
q()
? analysis
q()
?reshape
?colMean
?cMean
?cMeans
colMeans
?colMeans
v<-c("a","b","c")
df<-data.frame(v,v,v,v)
colMeans(df)
df
subset(df,v=="a")
subset(df,v %in% c("a","b")[,2:4]
Q
subset(df,v %in% c("a","b"))[,2:4]
c(1,"jo",subset(df,v %in% c("a","b"))[,3])
?file.path
dir()
q()
q()
windows()
windows()
postscrpt()
postscript()
xfig()
?xfig
?windows
?postscript
?par
?pch
?quartz
?quartz
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
library(graphics)
?quartz
??quartz
install.packages("grDevices")
install.packages("grDevices")
library(grDevices)
?quartz
?transform
colors()
dev.cur()
windows()
windows()
dev,cur()
dev.cur()
dev.cur()
windows()
dev.cur()
dev.set(1)
windows()
dev.cur()
dev.set(3)
q()
?r
?ggm
?rgm
x<-rnorm(100)
hist(x)
cur.dev()
dev.cur()
dev.set(1)
dev.set(2)
dev.cur()
q()
?lty
?par
setwd("C:/Users/mja/Desktop/DataScience/ExploratoryDataAnalysis/ProjectI/ExData_Plotting1")
dir()
source("plot3.R")
dir()
source("plot3.R")
dir()
?plot
?par
source("plot4.R")
dir()
source("plot4.R")
dir()
source("plot3.R")
source("plot3.R")
dir
setwd("C:/Users/mja/Desktop/DataScience/ExploratoryDataAnalysis/ProjectI/ExData_Plotting1")
rse repo and reading it into a data frame
url4<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url4, destfile="household_power_consumption.zip")
unzip("household_power_consumption.zip")
file4<-"household_power_consumption.txt"
# I have analysed the household_power_consumption.txt file using OpenOffice Calc
# The first line of data corresponding to the required dates is line 66638
# The last line corresponding to the required dates is line 69517
# Which corresponds to a total of 2880 lines to be read
data4<-read.table(file4,sep=";",na.strings="?",skip=66637,nrows=2880)
# retrieving the variable names and labeling the data frame
aux<-read.table(file4,sep=";",na.strings="?",nrows=1,header=TRUE)
colnames(data4)<-colnames(aux)
# creating a new column datetime by collapsing Date and Time
# and converting it in a Date object
data4$datetime <- apply(data4[ ,c("Date","Time")],1 ,paste ,collapse = " " )
data4$datetime <- as.POSIXct(strptime(data4$datetime, "%d/%m/%Y %H:%M:%S"))
## Generating, annotating and saving plot4
#The required height and widthe of 480x 480 pixels are already defined by default
# background was redefined as transparent
png(file = "plot4.png",bg="transparent")
par(mfrow=c(2,2))
#1st plot
plot(data4$Global_active_power~data4$datetime,type='l',xlab="",ylab="Global Active Power", bg="transparent")
#2nd plot
plot(data4$Voltage~data4$datetime,type='l',xlab="datetime",ylab="Voltage", bg="transparent")
#3rd plot
plot(data4$Sub_metering_1~data4$datetime,type='l',col="black",xlab="",ylab="Energy sub metering",bg="transparent")
lines(data4$Sub_metering_2 ~ data4$datetime, col="red")
lines(data4$Sub_metering_3 ~ data4$datetime, col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty="solid",col=c("black", "red", "blue"))
#4th plot
plot(data4$Global_reactive_power ~data4$datetime,type='l',xlab="datetime",ylab="Global_reactive_power", bg="transparent")
dev.off()
### Downloading data from the course repo and reading it into a data table
url1<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url1, destfile="household_power_consumption.zip")
unzip("household_power_consumption.zip")
file1<-"household_power_consumption.txt"
# I have analysed the household_power_consumption.txt file using OpenOffice Calc
# The first line of data corresponding to the required dates is line 66638
# The last line corresponding to the required dates is line 69517
# Which corresponds to a total of 2880 lines to be read
data1<-read.table(file1,sep=";",na.strings="?",skip=66637,nrows=2880)
## Generating, annotating and saving plot1
#The required height and widthe of 480x 480 pixels are already defined by default
# background was redefined as transparent
png(file = "plot1.png",bg="transparent")
#The column corresponding to the variable Global Active Power is the 3rd column
hist(data[,3],main="Global Active Power",xlab="Global Active Power (kilowatts)",col="red",bg="transparent")
dev.off()
dir()
### Downloading data from the course repo and reading it into a data table
url1<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url1, destfile="household_power_consumption.zip")
unzip("household_power_consumption.zip")
file1<-"household_power_consumption.txt"
# I have analysed the household_power_consumption.txt file using OpenOffice Calc
# The first line of data corresponding to the required dates is line 66638
# The last line corresponding to the required dates is line 69517
# Which corresponds to a total of 2880 lines to be read
data1<-read.table(file1,sep=";",na.strings="?",skip=66637,nrows=2880)
## Generating, annotating and saving plot1
#The required height and widthe of 480x 480 pixels are already defined by default
# background was redefined as transparent
png(file = "plot1.png",bg="transparent")
#The column corresponding to the variable Global Active Power is the 3rd column
hist(data[,3],main="Global Active Power",xlab="Global Active Power (kilowatts)",col="red",bg="transparent")
dev.off()
pwd
cwd
dir
gwd
getwd
data1<-read.table(file1,sep=";",na.strings="?",skip=66637,nrows=2880)
hist(data[,3],main="Global Active Power",xlab="Global Active Power (kilowatts)",col="red",bg="transparent")
### Downloading data from the course repo and reading it into a data table
url1<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url1, destfile="household_power_consumption.zip")
unzip("household_power_consumption.zip")
file1<-"household_power_consumption.txt"
# I have analysed the household_power_consumption.txt file using OpenOffice Calc
# The first line of data corresponding to the required dates is line 66638
# The last line corresponding to the required dates is line 69517
# Which corresponds to a total of 2880 lines to be read
data1<-read.table(file1,sep=";",na.strings="?",skip=66637,nrows=2880)
## Generating, annotating and saving plot1
#The required height and widthe of 480x 480 pixels are already defined by default
# background was redefined as transparent
png(file = "plot1.png",bg="transparent")
#The column corresponding to the variable Global Active Power is the 3rd column
hist(data1[,3],main="Global Active Power",xlab="Global Active Power (kilowatts)",col="red",bg="transparent")
dev.off()
## Downloading data from the course repo and reading it into a data frame
url2<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url2, destfile="household_power_consumption.zip")
unzip("household_power_consumption.zip")
file2<-"household_power_consumption.txt"
# I have analysed the household_power_consumption.txt file using OpenOffice Calc
# The first line of data corresponding to the required dates is line 66638
# The last line corresponding to the required dates is line 69517
# Which corresponds to a total of 2880 lines to be read
data2<-read.table(file2,sep=";",na.strings="?",skip=66637,nrows=2880)
# retrieving the variable names and labeling the data frame
aux<-read.table(file2,sep=";",na.strings="?",nrows=1,header=TRUE)
colnames(data2)<-colnames(aux)
# creating a new column datetime by collapsing Date and Time
# and converting it in a Date object
data2$datetime <- apply(data2[ ,c("Date","Time")],1 ,paste ,collapse = " " )
data2$datetime <- as.POSIXct(strptime(data2$datetime, "%d/%m/%Y %H:%M:%S"))
## Generating, annotating and saving plot2
#The required height and widthe of 480x 480 pixels are already defined by default
# background was redefined as transparent
png(file = "plot2.png",bg="transparent")
plot(data2$Global_active_power~ data2$datetime,type='l',xlab="",ylab="Global Active Power (kilowatts)",bg="transparent")
dev.off()
## Downloading data from the course repo and reading it into a data frame
url3<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url3, destfile="household_power_consumption.zip")
unzip("household_power_consumption.zip")
file3<-"household_power_consumption.txt"
# I have analysed the household_power_consumption.txt file using OpenOffice Calc
# The first line of data corresponding to the required dates is line 66638
# The last line corresponding to the required dates is line 69517
# Which corresponds to a total of 2880 lines to be read
data3<-read.table(file3,sep=";",na.strings="?",skip=66637,nrows=2880)
# retrieving the variable names and labeling the data frame
aux<-read.table(file3,sep=";",na.strings="?",nrows=1,header=TRUE)
colnames(data3)<-colnames(aux)
# creating a new column datetime by collapsing Date and Time
# and converting it in a Date object
data3$datetime <- apply(data3[ ,c("Date","Time")],1 ,paste ,collapse = " " )
data3$datetime <- as.POSIXct(strptime(data3$datetime, "%d/%m/%Y %H:%M:%S"))
## Generating, annotating and saving plot3
#The required height and widthe of 480x 480 pixels are already defined by default
# background was redefined as transparent
png(file = "plot3.png",bg="transparent")
plot(data3$Sub_metering_1~ data3$datetime,type='l',col="black",xlab="",ylab="Energy sub metering",bg="transparent")
lines(data3$Sub_metering_2 ~ data3$datetime, col="red")
lines(data3$Sub_metering_3 ~ data3$datetime, col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty="solid",col=c("black", "red", "blue"))
dev.off()
### Downloading data from the course repo and reading it into a data frame
url2<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(url2, destfile="household_power_consumption.zip")
unzip("household_power_consumption.zip")
file2<-"household_power_consumption.txt"
# I have analysed the household_power_consumption.txt file using OpenOffice Calc
# The first line of data corresponding to the required dates is line 66638
# The last line corresponding to the required dates is line 69517
# Which corresponds to a total of 2880 lines to be read
data2<-read.table(file2,sep=";",na.strings="?",skip=66637,nrows=2880)
# retrieving the variable names and labeling the data frame
aux<-read.table(file2,sep=";",na.strings="?",nrows=1,header=TRUE)
colnames(data2)<-colnames(aux)
# creating a new column datetime by collapsing Date and Time
# and converting it in a Date object
data2$datetime <- apply(data2[ ,c("Date","Time")],1 ,paste ,collapse = " " )
data2$datetime <- as.POSIXct(strptime(data2$datetime, "%d/%m/%Y %H:%M:%S"))
## Generating, annotating and saving plot2
#The required height and widthe of 480x 480 pixels are already defined by default
# background was redefined as transparent
png(file = "plot2.png",bg="transparent")
plot(data2$Global_active_power~ data2$datetime,type='l',xlab="",ylab="Global Active Power (kilowatts)",bg="transparent")
dev.off()
